---
title: "ica-wrangling"
editor: visual
---

---
title: "Wrangling"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---

## Exercises

### Example 1

a.  select
b.  filter
c.  mutate
d.  arrange
e.  summarize


```{r}
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

### Exercise 1: `select` Practice {.unnumbered}

```{r}
# Define elections_small
#elections_small <- elections |>
#  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
#head(elections_small)

```

### Exercise 2: `filter` Demo {.unnumbered}

```{r}
# Keep only data on counties in Hawaii
#elections_small |>
# filter(state_name == "Hawaii")
```

```{r}
# Keep counties in Hawaii AND Delaware
#elections_small |> 
#  filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
#elections_small |> 
#  filter(repub_pct_20 > 93.97)
```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row than your answer above
#elections_small |> 
#  filter(repub_pct_20 >= 93.97)
```

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
#elections_small |>
# filter(state_name == "Texas") |>
# filter(dem_pct_20 > 65)

# Method 2: 1 filter with 2 conditions
#elections_small |>
# filter(state_name == "Texas", dem_pct_20 > 65)
```

### Exercise 3: `arrange` Demo {.unnumbered}

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
#elections_small |>
#  arrange(repub_pct_20) |>
#  head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
#elections_small |>
#  arrange(desc(repub_pct_20)) |>
#  head()
```

### Exercise 4: `mutate` Demo {.unnumbered}

```{r}
# Define diff_20, the difference btwn the Repub and Dem percent in 2020
#elections_small |> 
#  mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
#  head()
```

```{r}
# Define repub_votes_20, the number (not percent) of Repub votes in 2020
#elections_small |> 
#  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
#  head()
```

```{r}
# Define repub_win_20, whether the Repub won in 2020 (TRUE or FALSE!)
#elections_small |> 
#  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
#  head()
```

### Exercise 5: Pipe Series {.unnumbered}

#### Part c {.unnumbered}

It's more "computationally efficient" to get rid of some rows before arranging.

#### Part e {.unnumbered}

We can't select a variable before we define it!

### Exercise 6: DIY Pipe Series {.unnumbered}

#### Part a {.unnumbered}

Here's my translation:

-   just the counties in Minnesota ---\> filter
-   just the counties in Minnesota and their Democratic 2020 vote percentage ---\> select
-   from highest to lowest ---\> arrange

```{r}
# Remember to try this 1 line at a time
#elections_small |> 
#  filter(state_name == "Minnesota") |> 
 # select(county_name, dem_pct_20) |> 
#  arrange(desc(dem_pct_20))

```

#### Part b {.unnumbered}

Here's my translation:

-   counties in Minnesota and Wisconsin ---\> filter
-   change in Democratic vote percentage in 2020 vs 2016 ---\> mutate (we don't already have this)
-   sorts the counties from highest to lowest ---\> arrange
-   include the following variables (and only these variables) ---\> select

```{r}
# Remember to try this 1 line at a time before storing!
#mn_wi <- elections_small |> 
#  filter(state_name %in% c("Minnesota", "Wisconsin")) |> 
#  select(state_name, county_name, dem_pct_20, dem_pct_16) |>
#  mutate(dem_change = dem_pct_20 - dem_pct_16) |> 
#  arrange(dem_change)
  
# Check it out
#head(mn_wi)
```

#### Part c {.unnumbered}

There was a stronger Dem shift from 2016 to 2020 in Minnesota.
Further, in most counties across both states, the percent Dem tended to be higher in 2020 than in 2016.

```{r}
#ggplot(mn_wi, aes(x = dem_change, fill = state_name)) + 
#  geom_density(alpha = 0.5)
#ggplot(mn_wi, aes(y = dem_change, x = state_name)) + 
#  geom_boxplot()
```

### Exercise 7: `summarize` Demo {.unnumbered}

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
#elections_small |> 
#  summarize(median(repub_pct_20))
```

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
# AND name it "median_repub"
#elections_small |> 
#  summarize(median_repub = median(repub_pct_20))
```

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
# AND the total number of votes across all counties
# AND name the results
#elections_small |> 
#  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```

### Exercise 8: `summarize` + `group_by` demo {.unnumbered}

```{r}
# Calculate the median 2020 Repub percent and total votes BY STATE
#elections_small |> 
#  group_by(state_name) |> 
#  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) 
```

### Exercise 9: DIY {.unnumbered}

#### Part a {.unnumbered}

```{r}
# Sort the states from the most to least total votes in 2020
#elections_small |> 
#  group_by(state_name) |> 
#  summarize(total = sum(total_votes_20)) |> 
#  arrange(desc(total))
```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
#elections_small |> 
#  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
#         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
#  group_by(state_name) |> 
#  summarize(dem_total = sum(dem_votes_20),
#            repub_total = sum(repub_votes_20))
```

```{r}
# What states did the Democratic candidate win in 2020?
#elections_small |> 
#  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
#         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
#  group_by(state_name) |> 
#  summarize(dem_total = sum(dem_votes_20),
#            repub_total = sum(repub_votes_20)) |> 
#  filter(dem_total > repub_total)
```

### Exercise 10: Practice on New Data {.unnumbered}

```{r}
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")


# In what years did Brazil win the World Cup?
world_cup |> 
  filter(winner == "Brazil")
```

```{r}
# What were the 6 World Cups with the highest attendance?
world_cup |> 
  arrange(desc(attendance)) |> 
  head()
```

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored)) + 
  geom_histogram(color = "white")
```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup |> 
  summarize(min(goals_scored), median(goals_scored), max(goals_scored))
```

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(x = year, y = goals_scored)) + 
  geom_point() + 
  geom_line()
```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
per_game_data <- world_cup |> 
  mutate(goals_per_game = goals_scored / games)

ggplot(per_game_data, aes(x = year, y = goals_per_game)) + 
  geom_point() + 
  geom_line()
```
